# Customer Churn Prediction Using Neural Network
# see attached CSV file that includes the data 
# make sure to update the file path
## Description
This project implements a neural network model using TensorFlow and Keras to predict customer churn from a dataset. 
The model performs binary classification, which aims to predict whether customers will leave (churn) based on their features,
such as demographics, account information, and services used.

The dataset used is `Churn_Modelling.csv`, which contains customer data including tenure, credit score, balance, etc.

## Features
- Neural network built using TensorFlow and Keras
- Preprocessing steps including:
  - OneHotEncoding for categorical variables (e.g., Geography)
  - LabelEncoding for binary variables (e.g., Gender)
  - Feature scaling using StandardScaler
- Model evaluation using confusion matrix and accuracy score
- Prediction of customer churn based on user data

## Dataset
- The dataset used is `Churn_Modelling.csv`, which should be placed in the same directory as the script.
- You can download the dataset from the source or use any similar dataset with the same structure.

## Code

### Importing Libraries

```python
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

#Loading and Preprocessing the Data
dataset = pd.read_csv("Churn_Modelling.csv")
x = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:, -1].values

# Encoding categorical data
le = LabelEncoder()
x[:, 2] = le.fit_transform(x[:, 2])

# OneHotEncoding for Geography
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
x = np.array(ct.fit_transform(x))

# Train-test split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# Feature scaling
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

#Building the Neural Network
ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(6, activation='relu'))
ann.add(tf.keras.layers.Dense(6, activation='relu'))
ann.add(tf.keras.layers.Dense(1, activation='sigmoid'))

# Compile the model
ann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
ann.fit(x_train, y_train, batch_size=32, epochs=100)

#Model Evaluation
# Predicting the Test set results
y_pred_prob = ann.predict(x_test)
y_pred = (y_pred_prob > 0.5).astype(int)

# Confusion Matrix and Accuracy Score
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)

print("Confusion Matrix:\n", cm)
print("Accuracy Score:", accuracy)
